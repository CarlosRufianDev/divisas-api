const express = require('express');
const router = express.Router();
const {
  convertCurrency,
  getHistory,
  deleteAllHistory,
  deleteById,
  deleteUserHistory,
  deleteOldConversions
} = require('../controllers/convertController');
const validateConversion = require('../validators/convertValidator');
const { validationResult } = require('express-validator');
const requireAuth = require('../middleware/authMiddleware');
const isAdmin = require('../middleware/isAdmin'); // âœ… Importado para uso de admin
const Conversion = require('../models/Conversion');
const buildFilters = require('../utils/buildFilters');

// Middleware para manejar errores de validaciÃ³n
const handleValidation = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// POST para convertir divisas (sin autenticaciÃ³n)
router.post('/convert', validateConversion, handleValidation, convertCurrency);

// GET historial del usuario autenticado
router.get('/historial', requireAuth, getHistory);

// DELETE todo el historial del usuario autenticado
router.delete('/historial', requireAuth, deleteAllHistory);

// DELETE una conversiÃ³n especÃ­fica por ID (usuario autenticado)
router.delete('/historial/entry/:id', requireAuth, deleteById);

// DELETE historial completo de un usuario especÃ­fico (solo admin)
router.delete('/historial/user/:userId', requireAuth, isAdmin, deleteUserHistory);

//
router.get('/clean-old', requireAuth, isAdmin, deleteOldConversions);

// GET tipos de cambio mÃºltiples basados en una moneda
router.get('/rates/:baseCurrency', async (req, res) => {
  try {
    const { baseCurrency } = req.params;

    // Validar que la moneda base sea vÃ¡lida
    const validCurrencies = [
      'USD', 'EUR', 'GBP', 'JPY', 'CHF', 'CAD', 'AUD', 'CNY',
      'MXN', 'BRL', 'KRW', 'INR', 'SEK', 'NOK',
      'HKD', 'SGD', 'NZD', 'ZAR', 'TRY', 'PLN'
    ]; // âœ… Ahora 20 divisas
    if (!validCurrencies.includes(baseCurrency.toUpperCase())) {
      return res.status(400).json({ error: 'Moneda base no vÃ¡lida' });
    }

    // âœ… CAMBIAR A FRANKFURTER (igual que en convertController.js)
    const response = await fetch(`https://api.frankfurter.app/latest?from=${baseCurrency.toUpperCase()}`);

    if (!response.ok) {
      throw new Error('Error al obtener tipos de cambio');
    }

    const data = await response.json();

    // Filtrar solo las monedas que soportamos
    const supportedRates = {};
    validCurrencies.forEach(currency => {
      if (data.rates[currency]) {
        supportedRates[currency] = data.rates[currency];
      }
    });

    res.json({
      base: baseCurrency.toUpperCase(),
      date: data.date,
      rates: supportedRates
    });

  } catch (error) {
    console.error('Error obteniendo tipos de cambio:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// GET lista de divisas disponibles
router.get('/currencies', (req, res) => {
  const currencies = [
    { code: 'USD', name: 'DÃ³lar Estadounidense', flag: 'ðŸ‡ºðŸ‡¸', symbol: '$' },
    { code: 'EUR', name: 'Euro', flag: 'ðŸ‡ªðŸ‡º', symbol: 'â‚¬' },
    { code: 'GBP', name: 'Libra Esterlina', flag: 'ðŸ‡¬ðŸ‡§', symbol: 'Â£' },
    { code: 'JPY', name: 'Yen JaponÃ©s', flag: 'ðŸ‡¯ðŸ‡µ', symbol: 'Â¥' },
    { code: 'CHF', name: 'Franco Suizo', flag: 'ðŸ‡¨ðŸ‡­', symbol: 'CHF' },
    { code: 'CAD', name: 'DÃ³lar Canadiense', flag: 'ðŸ‡¨ðŸ‡¦', symbol: 'C$' },
    { code: 'AUD', name: 'DÃ³lar Australiano', flag: 'ðŸ‡¦ðŸ‡º', symbol: 'A$' },
    { code: 'CNY', name: 'Yuan Chino', flag: 'ðŸ‡¨ðŸ‡³', symbol: 'Â¥' },
    { code: 'MXN', name: 'Peso Mexicano', flag: 'ðŸ‡²ðŸ‡½', symbol: '$' },
    { code: 'BRL', name: 'Real BrasileÃ±o', flag: 'ðŸ‡§ðŸ‡·', symbol: 'R$' },
    { code: 'KRW', name: 'Won Surcoreano', flag: 'ðŸ‡°ðŸ‡·', symbol: 'â‚©' },
    { code: 'INR', name: 'Rupia India', flag: 'ðŸ‡®ðŸ‡³', symbol: 'â‚¹' },
    { code: 'SEK', name: 'Corona Sueca', flag: 'ðŸ‡¸ðŸ‡ª', symbol: 'kr' },
    { code: 'NOK', name: 'Corona Noruega', flag: 'ðŸ‡³ðŸ‡´', symbol: 'kr' },
    { code: 'HKD', name: 'DÃ³lar de Hong Kong', flag: 'ðŸ‡­ðŸ‡°', symbol: 'HK$' },
    { code: 'SGD', name: 'DÃ³lar de Singapur', flag: 'ðŸ‡¸ðŸ‡¬', symbol: 'S$' },
    { code: 'NZD', name: 'DÃ³lar NeozelandÃ©s', flag: 'ðŸ‡³ðŸ‡¿', symbol: 'NZ$' },
    { code: 'ZAR', name: 'Rand Sudafricano', flag: 'ðŸ‡¿ðŸ‡¦', symbol: 'R' },
    { code: 'TRY', name: 'Lira Turca', flag: 'ðŸ‡¹ðŸ‡·', symbol: 'â‚º' },
    { code: 'PLN', name: 'Zloty Polaco', flag: 'ðŸ‡µðŸ‡±', symbol: 'zÅ‚' }
  ]; // âœ… Ahora 20 divisas con sÃ­mbolos

  res.json({
    success: true,
    currencies,
    total: currencies.length
  });
});

// Historial de conversiones del usuario autenticado
router.get('/history', requireAuth, async (req, res) => {
  try {
    const filters = buildFilters(req.query, req.user.userId);
    const history = await Conversion.find(filters).sort({ createdAt: -1 });
    res.json(history);
  } catch (err) {
    res.status(500).json({ error: 'No se pudo obtener el historial' });
  }
});

module.exports = router;
